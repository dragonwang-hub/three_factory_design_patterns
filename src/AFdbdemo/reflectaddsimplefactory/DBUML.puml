@startuml
'https://plantuml.com/class-diagram

package "Product"{
interface IUser {
    void insert(User user)
    User getUser(int id)
}
note top: Abstract ProductA

package "Concrete ProductA" {
    class SqlserverUser implements IUser {
        void insert(User user)
        User getUser(int id)
    }
    class AccessUser implements IUser {
        void insert(User user)
        User getUser(int id)
    }
}

interface IDepartment {
    void insert(Department department)
    Department getDepartment(int id)
}
note top: Abstract ProductB
package "Concrete ProductB" {
    class SqlserverDepartment implements IDepartment {
        void insert(Department department)
        Department getDepartment(int id)
    }
    class AccessDepartment implements IDepartment {
        void insert(Department department)
        Department getDepartment(int id)
    }
}
}

class DataAccess {
    IUser createUser()
    IDepartment createDepartment()
}
note top: Simple Factory
note bottom of DataAccess: Use reflection techniques to create objects

DataAccess .[#green]> IDepartment
DataAccess .[#blue]> IUser



@enduml